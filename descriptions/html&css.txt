 # HTML

example: paragraph element -> <p>(opening tag) content(also images have no content) </p>(closing tag)

## extensions: 
- image prewiew
- auto rename tag
- live server
- color highlight

##HTML Entities

## settings
- auto close tag

## Start

1. <!DOCTYPE html> # declare doc type to tell the browser that this doc use hTML.
2. <html></html> # html element
3. <head> </head> # head element inside html element (include title, additional info about page, link to css files, ...)
* <title></title> # subset of head (inside of head)
4. <body></body> #  body element next and out of head but inside of html element
5. <h1></h1> # head of text that has h1 to h6 and go to smaller size of font (every page should be have h1)
6. <p></p> # paragraph
7. <!-- --> # comment
8. 
  - <strong></strong> # bold a part of text
  - <b></b> # bold a part of text
  - <i></i> # italic a part of text
  - <em></em> # italic a part of text
9. 
  - <ol></ol> # order list
  - <li></li> # for each item of list and it must be in ol
10.
  - <ul></ul> # unorder list
  - <li></li> # for each item of list and it must be in ul
  
### attributes
11. 
  - <img src="directory of image" alt="description of image" height="" weight="" />
  - <html lang="en"></html> # html element and set language
  - <meta charset="UTF-8" # set character
  
12. href is attribute that create link
  - <a href="url">title of link</a> # open website that is outside of our website in this tab 
  - <a href="url" target="_blank">title of link</a> # open website that is outside of our website in new tab
  - <a href="name of html that you create for example: blog.html">title of link</a> # open page that is inside of our website in this tab 
  - <a href="#">title of link</a> # open nothing and just go to above the webpage

13.
  - <nav></nav> # group navigation links in a container
  - <header></header> # group header text like h1 or somthing like this that we want separate them from other contents
  - <article></article> # group other content except header
    - <header></header> # group header content of article

14. <aside></aside> # group that is the closure of main content
15. <footer></footer> # craete a footer
16. <div></div> # for group contents when we use this element the group has no semantic meaning for us and just we want group them

# CSS

## Inline 
<h1 style="color : blue"></h1> declare style in html's elements

## Internal
<style> h1 {color: blue}></style> # declare style element in head.

## External 
h1 {color: blue} # create css file write code like this.
<link href="directory of css file" rel="description" /> # link html file to css file

## Selector Examples
 
example1:
h1 {
  color: #1098ad; # font color
  font-size: 26px; # font size
  font-family: sans-serif; # kind of font
  text-transform: uppercase; # characters form
  font-style: italic; # style
  text-align: center; # alignment
  background-color: #f7f7f7; #background color
}

example2:
h1,h2,h3,h4,p,li {font-family: sans-serif; } # we can list selector to attribute the same features to them

#id {font-family: sans-serif;} # specify selector by id (id is unic) we dont use id mainly.
.class {font-family: sans-serif;} # specify selector by class
/* */ # comment

example3:
.related-list {list-style: none;} # points remove

## colors
rgb : #ff ff ff (hexadecimal)

example4:
.related-aside {
  background-color: #f7f7f7; # background color
  border-top: 5px solid #1098ad; # border top size, form, color
  border-bottom: 5px solid #1098ad; # border bottom  size, form, color
}

example5:
li:first-child {
  font-weight: bold; # convert all first item of every li elements to bold.
}

example6:
li:nth-child(2) {
  color: #1098ad; # colored second item of every li elements.
}

example7:
article p:last-child {
  color: #1098ad;       #colored the last child of article if it was p, but if p was not the last on this code is incurrect.
}

## Link Styles
a:link {
  color: #1098ad;        # link style
  text-decoration: none; # underline of links
}

a:visited {
  color: #1098ad;  # link that visited style
}

a:hover {
  color: orangered;
  font-weight: bold;			# when you move mouse on link style
  text-decoration: underline  orangered;
}

a:active {
  background-color: black;	# when you click on link style
  font-style: italic;
}

## chrome dev tools
right click >> inspect >> elements 

- on right side you can see style of each part you click on it

* {
  color:red;  # all of elements get red color
}
	

## Resolve conflicting delaration
priority (high to low): #id -> .class -> element selector(p, li, div, ...) -> universal selector(*) and in same priority the last one is higher priority yhan other
priority (high to low): psudo class -> element selector

## Inheritance 
some properties (like text)  get inherited from parents to child but can easily overwrite same properties that there is in child.

## The CSS box model
1.content # text, image, table, ...
2.border # line around box
3.padding # space inside
4.margin # space outside

- if you margin-bottem for top element, and margin top for bottem element, the bigger one applied.
example1:
.main-header {
  padding-left: 40px;
  padding: 20px 40px; # bottem-top  left-right
  margin-bottom: 60px;
  width: 500px; # width of element box
}

example2:
.post-img {
  width: 100%; # 100% of container(parent) of the current element width
  height: auto;
}

example3:
.container {	# all of elements are in container
  width: 700px; # the children not be wider than parent.
  margin-left: auto; # means margin of left equals right and depends on page size (as a result container been in center)
  margin-right: auto;
}

## different boxes or elements
1. inline boxes # spacing content's size (strong, a, ...) -> margin and padding applies in horizontally not top or bottom
nav a:link {
  display: block; # convert to block level
}

2. block-level boxes # spacing all of parent's element width
nav a:link {
  display: inline; # convert to inline
}

3.inline-block box 
- looks like inline (spacing content's size), behave like block level (margin and padding applies all of side)
nav a:link {
  display: inline-block; # convert to inline-block
}

## Positioning
1.normal flow
2.absolute positioning # fixed

example1:
position: relative; # in this example is parent
button {
  position: absolute;
  bottom: 50px;		# child # this absolutely fixed (with 50px from right and 50px from bottom of parent that set to relative.
  right: 50px;
}

## Psudo elements

example1:
h1::first-letter {
  font-style: normal;
}

example2:
h3 + p::first-line {  #the p elements that are exactly next of h3s first line (adjancy elements)
  color: red;
}

### Create psudo element in css # no exist this element in html
example:
h2 {
  position: relative; # for position the child, parent must be relative
}

h2::after {			#create element after h2
  content: "Top";
  color: #444;
  background-color: #ffe70e;
  font-size: 16px;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

# CSS LAYOUTS

- layout is a way that include text, image, ... that arranged on webpage
- page layout is include components layouts that are in webpage
- component layouts is part of a page loyout that include some contents

## Float Layouts

example1:
.auther-image {
  float: left ;			# float-left is connecting to leftmost side since get to an element and likes taht remove from normal flow
  margin-bottom: 20px;
}
.auther {
  margin-left: 20px;
  margin-top: 10px;
  float: left;			# float-left is connecting to leftmost side since get to an element (auther-image) 
}

### fix colapse (clearfix hack) to resolve the colapsing in float layouts. 
-first you craete another class in html for your element(clearfix in example) then you create psudo element(after) give it content and convert it to block to fix colapse.
.clearfix::after {
  clear: both;
  content: '';
  display: block;
}


### Box sizing
box-sizing: border-box;  # change size of things that are in border to fix the best size of the single elements, so it's better at first we add this code in to a * selector. 

## FlexBox      # add image of properties to github

- it is a flex container with some flex child (flex items) that they were placed side by side
- has cross axis andmain axis

some of properties:
*notice: their properties are apply to all of items and this code write in element that all of items are subset of it.
  display: flex;
  align-self: stretch # strech to the highest item
  order: number # default all of items order is 0 and we can change this order
  flex-basis: 200px; # all of items that are smaller than 200px get to 200 and other ones that their content bigger than 200, their width fixed to their content width.
  flex-shrink: 0; # 0, 1, 2, ...  (numbers is like order and when increase that item sise also increase)-> active or deactive # if be 1 the items generally can not bigger than container even flex basis is muuch and limit  size of items and default is 1
  flex-grow: 1; # 0, 1, 2, ... (numbers is like order and when increase that item sise also increase)-> if its 1 the items extend to fill remaining space of container
  flex: 0 0 200px # flex-grow flex-shrink flex-basis
  
  ## CSS Grid
- we have a grid container that includes grid items
- divide in column and row child element
- grid css has gridlines that they divide container to different parts, these parts called grid cells that grid items get into these cells also zthese cells might be not fill by items and be empty
	if we have for example 2 rows, grid line is 3 and so on...

### Auto grid cells sizing
display: grid;
grid-template-columns: 250px 150px; # generate 2 columns with 250px and 150 px width
grid-template-columns: 1fr 1fr; # when you set the column width 1fr fill the container and it is flexible so if you set 1fr to 2 column boyh of them have same size and flexible (2fr is 2 times bigger than 1fr)
grid-template-columns: 1fr 1fr == grid-template-columns: repeat(2, 1fr);
grid-template-columns: auto; # take space that it needs
column-gap: 30px; # column gap

also row has above instruction
grid-template-rows: 300px 200px; # for rows 
row-gap: 60px; # row gap

### Manualy grid cells sizing

indexing guidlines: 1, 2, 3, 4 or -4, -3, -2, -1
grid-column: 1 / 3; # from 1 to 3 column guideline
grid-column: 1 / span 3; # start from 1 and span across three cells
grid-row: 2 / 3; # from 2 to 3 row guideline

### aligning tracks inside the containers
justify-content: center; # aligning horizontally
align-content: center; # aligning vertically

aligning items inside the cells:
align-items: center; # aligning vertically
justify-items: center; # aligning horizontally

align-self: center; # aligning vertically for one item
justify-self: center; # aligning horizontally for one item

